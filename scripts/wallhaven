#!/usr/bin/env bash

# ENVORINMNENT VARIABLES
# ----------------------
# WALLHAVEN_API - API key from wallhaven.cc
# WALLHAVEN_USER - Username from wallhaven.cc

source $HOME/.dotfiles/.env

CACHE_DIR="$HOME/.cache/wallhaven"
PAGES=5
CATEGORIES=111
PURITY=110

Help() 
{
  echo "Wallpaper switcher for wallhaven.cc"
  echo ""
  echo "Required env variables:"
  echo "WALLHAVEN_API - API key from wallhaven.cc"
  echo "WALLHAVEN_USER - wallhaven username"
  echo ""
  echo "Syntax: wallhaven [-options]"
  echo "options:"
  echo " -c <name>   collection name"
  echo " -t          set random from toplist"
  echo " -x <bits>   filter naughty stuff sfw|sketchy|nsfw [default : $PURITY]"
  echo " -k <bits>   kategories general|anime|people [default: $CATEGORIES]"
  echo " -p <num>    how many toplist pages to pick from [default : $PAGES]"
  echo " -r <query>  random image with query"
  echo " -i <id>     set wallpaper by wallhaven id"
  echo " -f          get filepath of current wallpaper"
  echo " -u          get url of current wallpaper"
  echo " -d          delete cache"
  echo " -h          help menu"
  echo ""
  echo "Dependancies: curl, jq, sed"
}

GetCollection()
{
  RESULT=$(curl -s -H "Content-Type:application/json" "https://wallhaven.cc/api/v1/collections?apikey=$WALLHAVEN_API")
  COLLECTION_ID=$(echo "$RESULT" | jq --arg LABEL "$COLLECTION" '.data[] | select(.label == $LABEL) | .id')

  RESULT=$(curl -s -H "Content-Type:application/json" "https://wallhaven.cc/api/v1/collections/$WALLHAVEN_USER/$COLLECTION_ID?apikey=$WALLHAVEN_API")
  PAGES=$(echo "$RESULT" | jq '.meta.last_page')

  > $CACHE_DIR/images

  for ((i=1; i<=$PAGES; i++)); do
      RESULT=$(curl -s -H "Content-Type:application/json" "https://wallhaven.cc/api/v1/collections/fatnic/$COLLECTION_ID?page=$i&apikey=$WALLHAVEN_API")
      echo "$RESULT" | jq -r '.data[].path ' >> $CACHE_DIR/images
  done

  SELECTED=$(cat $CACHE_DIR/images | shuf -n 1)
  SetWallpaper
}

GetToplist()
{
  > $CACHE_DIR/images
  SEED="$RANDOM"
  for ((i=1; i<=$PAGES; i++)); do
    RESULT=$(curl -s -H "Content-Type:application/json" \
        "https://wallhaven.cc/api/v1/search?sorting=toplist&categories=$CATEGORIES&purity=$PURITY&seed=$SEED&ratios=landscape&topRange=1M&page=$i&apikey=$WALLHAVEN_API")
        echo "$RESULT" | jq -r '.data[].path ' >> $CACHE_DIR/images
  done
  SELECTED=$(cat $CACHE_DIR/images | shuf -n 1)
  SetWallpaper
}

GetRandom()
{
  > $CACHE_DIR/images
  SEED="$RANDOM"
    RESULT=$(curl -s -H "Content-Type:application/json" \
        "https://wallhaven.cc/api/v1/search?q=$QUERY&sorting=random&categories=$CATEGORIES&purity=$PURITY&seed=$SEED&ratios=landscape&apikey=$WALLHAVEN_API")
        echo "$RESULT" | jq -r '.data[].path ' >> $CACHE_DIR/images
  SELECTED=$(cat $CACHE_DIR/images | shuf -n 1)
  SetWallpaper
}

GetByID()
{
  > $CACHE_DIR/images
  RESULT=$(curl -s -H "Content-Type:application/json" "https://wallhaven.cc/api/v1/w/$WID?apikey=$WALLHAVEN_API")
  SELECTED=$(echo "$RESULT" | jq -r '.data.path')
  SetWallpaper
}

SetWallpaper()
{
  FILENAME=$(basename "$SELECTED")
  EXT="${FILENAME##*.}"

  if ! [[ $EXT =~ ^(jpg|jpeg|png)$ ]]; then
    exit 1
  fi

  CACHED="$CACHE_DIR/$FILENAME"
  WPID=$(echo $CACHED | cut -d"-" -f2 | cut -d"." -f1)

  echo "https://wallhaven.cc/w/$WPID" > $CACHE_DIR/current
  echo "$CACHED" >> $CACHE_DIR/current

  if [ ! -f $CACHED ]; then
    curl -s -o "$CACHED" "$SELECTED"
  fi 

  echo "$CACHED"
}

GetFilePath()
{
  sed -n '2p' $CACHE_DIR/current
}

GetUrl()
{
  sed -n '1p' $CACHE_DIR/current
}

DeleteCache()
{
  find $CACHE_DIR -maxdepth 1 -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" \) -exec rm {} \;
}

while getopts "hc:tr:p:dx:i:k:fu" option; do
  case $option in 
    h)
      Help
      exit;;
    c)
      COLLECTION=$OPTARG;;
    t)
      TOPLIST=X;;
    p)
      PAGES=$OPTARG;;
    r)
      QUERY=$OPTARG;;
    i)
      WID=$OPTARG;;
    x)
      PURITY=$OPTARG;;
    k)
      CATEGORIES=$OPTARG;;
    f)
      FILEPATH=x;;
    u)
      URL=x;;
    d)
      DeleteCache
      exit;;
    \?)
      Help
      exit;;
  esac
done

mkdir -p $CACHE_DIR

if [[ -v FILEPATH ]]; then
  GetFilePath
  exit
fi

if [[ -v URL ]]; then
  GetUrl
  exit
fi

if [[ -v WID ]]; then
  GetByID
  exit
fi

if [[ -v TOPLIST ]]; then
  GetToplist
  exit
fi

if [[ -v COLLECTION ]]; then
  GetCollection
  exit
fi

if [[ -v QUERY ]]; then
  GetRandom
  exit
fi
