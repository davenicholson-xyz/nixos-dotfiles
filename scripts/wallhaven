#!/usr/bin/env bash

# ENVORINMNENT VARIABLES
# ----------------------
# WALLHAVEN_API - API key from wallhaven.cc
# WALLHAVEN_USER - Username from wallhaven.cc

source $HOME/.dotfiles/.env

CACHE_DIR="$HOME/.cache/wallhaven"
PAGES=5
CATEGORIES=111
PURITY=110
TOPRANGE=1M

Help() 
{
  echo "Wallpaper switcher for wallhaven.cc"
  echo ""
  echo "Optional environmental variables:"
  echo "WALLHAVEN_API - API key from wallhaven.cc"
  echo "WALLHAVEN_USER - wallhaven username"
  echo ""
  echo "Syntax: wallhaven [-options]"
  echo "options:"
  echo " -c | --collection <name>   collection name (API and username required)"
  echo " --pre-cache                pre-download all wallpapers from chosen collection"
  echo " -t | --toplist             set randomly from toplist (API required for NSFW)"
  echo " --range <range>            set time range for toplist 1d|3d|1w|1M|3M|1y [default: $TOPRANGE]"
  echo " --pages <num>              how many toplist pages to search from [default : $PAGES]"
  echo " --hot                      set randomly from hot list (API required for NSFW)"
  echo " -p | --purity <bits>       filter naughty stuff sfw|sketchy|nsfw [default : $PURITY]"
  echo " -k | --categories <bits>   kategories general|anime|people [default: $CATEGORIES]"
  echo " -r | --random <query>      random image with query (API required for NSFW)"
  echo " -i | --id <id>             set wallpaper by wallhaven id (API required for NSFW)"
  echo " -l | --local               set wallpaper from random file in cache"
  echo " -f | --cached-file         get filepath of current wallpaper"
  echo " -u | --cached-url          get url of current wallpaper"
  echo " -d | --delete-cache        delete cache"
  echo " -h | --help                help menu"
  echo ""
}

GetCollection()
{

  if ! [[ -v WALLHAVEN_USER ]]; then
    echo "Error: WALLHAVEN_USER has not been set"
    exit 1;
  fi

  if ! [[ -v WALLHAVEN_API ]]; then
    echo "Error: WALLHAVEN_API has not been set"
    exit 1;
  fi

  RESULT=$(curl -s -H "Content-Type:application/json" "https://wallhaven.cc/api/v1/collections?apikey=$WALLHAVEN_API")
  COLLECTION_ID=$(echo "$RESULT" | jq --arg LABEL "$COLLECTION" '.data[] | select(.label == $LABEL) | .id')

  RESULT=$(curl -s -H "Content-Type:application/json" "https://wallhaven.cc/api/v1/collections/$WALLHAVEN_USER/$COLLECTION_ID?apikey=$WALLHAVEN_API")
  PAGES=$(echo "$RESULT" | jq '.meta.last_page')

  > $CACHE_DIR/images

  for ((i=1; i<=$PAGES; i++)); do
      RESULT=$(curl -s -H "Content-Type:application/json" "https://wallhaven.cc/api/v1/collections/fatnic/$COLLECTION_ID?page=$i&apikey=$WALLHAVEN_API")
      echo "$RESULT" | jq -r '.data[].path ' >> $CACHE_DIR/images
  done

  if [[ -v PRECACHE ]]; then
    GetPreCache
    exit
  fi

  SELECTED=$(cat $CACHE_DIR/images | shuf -n 1)
  SetWallpaper
}

GetPreCache()
{
  while read p; do
    FILENAME=$(basename "$p")
    if [ -f "$CACHE_DIR/$FILENAME" ]; then
      continue
    fi
    curl -o "$CACHE_DIR/$(basename $p)" "$p"
  done < $CACHE_DIR/images
  exit
}

GetToplist()
{
  > $CACHE_DIR/images
  SEED="$RANDOM"
  for ((i=1; i<=$PAGES; i++)); do
    RESULT=$(curl -s -H "Content-Type:application/json" \
        "https://wallhaven.cc/api/v1/search?sorting=toplist&categories=$CATEGORIES&purity=$PURITY&seed=$SEED&ratios=landscape&topRange=$TOPRANGE&page=$i&apikey=$WALLHAVEN_API")
        echo "$RESULT" | jq -r '.data[].path ' >> $CACHE_DIR/images
  done
  SELECTED=$(cat $CACHE_DIR/images | shuf -n 1)
  SetWallpaper
}

GetHot()
{
  > $CACHE_DIR/images
  SEED="$RANDOM"
  for ((i=1; i<=$PAGES; i++)); do
    RESULT=$(curl -s -H "Content-Type:application/json" \
        "https://wallhaven.cc/api/v1/search?sorting=hot&categories=$CATEGORIES&purity=$PURITY&seed=$SEED&ratios=landscape&topRange=1M&page=$i&apikey=$WALLHAVEN_API")
        echo "$RESULT" | jq -r '.data[].path ' >> $CACHE_DIR/images
  done
  SELECTED=$(cat $CACHE_DIR/images | shuf -n 1)
  SetWallpaper
}

GetRandom()
{
  > $CACHE_DIR/images
  SEED="$RANDOM"
    RESULT=$(curl -s -H "Content-Type:application/json" \
        "https://wallhaven.cc/api/v1/search?q=$QUERY&sorting=random&categories=$CATEGORIES&purity=$PURITY&seed=$SEED&ratios=landscape&apikey=$WALLHAVEN_API")
        echo "$RESULT" | jq -r '.data[].path ' >> $CACHE_DIR/images
  SELECTED=$(cat $CACHE_DIR/images | shuf -n 1)
  SetWallpaper
}

GetByID()
{
  > $CACHE_DIR/images
  RESULT=$(curl -s -H "Content-Type:application/json" "https://wallhaven.cc/api/v1/w/$WID?apikey=$WALLHAVEN_API")
  SELECTED=$(echo "$RESULT" | jq -r '.data.path')
  SetWallpaper
}

SetWallpaper()
{
  FILENAME=$(basename "$SELECTED")
  EXT="${FILENAME##*.}"

  if ! [[ $EXT =~ ^(jpg|jpeg|png)$ ]]; then
    exit 1
  fi

  CACHED="$CACHE_DIR/$FILENAME"
  WPID=$(echo $CACHED | cut -d"-" -f2 | cut -d"." -f1)

  echo "https://wallhaven.cc/w/$WPID" > $CACHE_DIR/current
  echo "$CACHED" >> $CACHE_DIR/current

  if [ ! -f $CACHED ]; then
    curl -s -o "$CACHED" "$SELECTED"
  fi 

  echo "$CACHED"
}

GetLocal()
{
  find $CACHE_DIR -maxdepth 1 -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" \) | shuf -n 1
  exit 0;
}

GetFilePath()
{
  sed -n '2p' $CACHE_DIR/current
}

GetUrl()
{
  sed -n '1p' $CACHE_DIR/current
}

DeleteCache()
{
  find $CACHE_DIR -maxdepth 1 -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" \) -exec rm {} \;
}

while [[ "$1" != "" ]]; do
  case $1 in
    -h | --help)
      Help
      exit;;
    -c | --collection)
      shift
      COLLECTION=$1;;
    --pre-cache)
      PRECACHE=x;;
    -t | --toplist)
      TOPLIST=x;;
    --range)
      shift
      TOPRANGE=$1;;
    --hot)
      HOT=x;;
    --pages)
      shift
      PAGES=$1;;
    -r | --random)
      shift
      QUERY=$(jq -rn --arg x "$1" '$x|@uri');;
    -i | --id)
      shift
      WID=$1
      GetByID
      exit;;
    -p | --purity)
      shift
      PURITY=$1;;
    -k | --categories)
      shift
      CATEGORIES=$1;;
    -l | --local)
      GetLocal
      exit;;
    -f | --cached-file)
      GetFilePath
      exit;;
    -u | --cached-url)
      GetUrl
      exit;;
    -d | --delete-cache)
      DeleteCache
      exit;;
    *)
      Help
      exit 1;;
  esac
  shift
done

mkdir -p $CACHE_DIR

if [[ -v FILEPATH ]]; then
  GetFilePath
  exit
fi

if [[ -v URL ]]; then
  GetUrl
  exit
fi

if [[ -v TOPLIST ]]; then
  GetToplist
  exit
fi

if [[ -v HOT ]]; then
  GetHot
  exit
fi

if [[ -v COLLECTION ]]; then
  GetCollection
  exit
fi

if [[ -v QUERY ]]; then
  GetRandom
  exit
fi
